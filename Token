--Condition Scripter (for Lancer)
--Created by: ThirteenStrings
--Discord:  ThirteenStrings#0566

defaultData = {
  statusLocation = 3,
  resetLocation = 3,
  isLinked = false
}

function updateSave()
    saved_data = JSON.encode(saveData)
    self.script_state = saved_data
end

function onLoad(saved_data)
  previousName = self.getName()
  if self.getName() == "Condition Scripter" then
    self.createButton({click_function = "scriptToken", function_owner = self, label = "", position={0.35,0.1,0.68}, scale={0.5,0.5,0.5}, color={0,0.3,0},width = 400, height = 400, font_size = 200, tooltip = "Show", alignment=3})
  else
    if saved_data ~= "" and saved_data ~= nil then
      local loaded_data = JSON.decode(saved_data)
      saveData = loaded_data
    else
      saveData = defaultData
    end
    createButtons()
    createShowButton()
    buttonPointer = 1
  end
end

function createButtons()
  for i=0,50,1 do
    self.createButton({
      click_function = "dummyFunction",
      function_owner = self,
      label          = "",
      position       = {0,0,0},
      width          = 0
    })
  end
end

function dummyFunction() end

--Copy script function, only active on the Condition Scripter or on any token with "Condition Scripter" as its name
function scriptToken(obj,color,alt_click)
  local token = ""
  token = findByDistance()
  if token ~= nil then
    copyTo = getObjectFromGUID(token)
    if copyTo.script_code == nil or copyTo.script_code == "" then
      local script = self.script_code
      copyTo.script_code = script
      copyTo.reload()
    else
      copyTo.script_code = ""
      copyTo.reload()
    end
  end
end

--Thanks to Mr. Stump for the following 2 proximity location functions
--Lists any figurine within 2 units of the tool.
function findByDistance()
    local allObjects = getAllObjects()
    local foundFigurine = false
    for _, object in ipairs(allObjects) do
        if object.getDescription() == "Token" then
            --I have a pre-written function to get distance to objects
            local distance = findProximity(self.getPosition(), object)
            --Here is the check for distance
            if distance <= 2 then
                foundFigurine = true
                return object.getGUID()
            end
        end
    end
    if foundFigurine == false then
        print("No objects in range.")
    end
end

--Used by findByDistance
function findProximity(targetPos, object)
    local objectPos = object.getPosition()
    local xDistance = math.abs(targetPos.x - objectPos.x)
    local zDistance = math.abs(targetPos.z - objectPos.z)
    local distance = xDistance^2 + zDistance^2
    return math.sqrt(distance)
end

--Function to create the initial button to open status menu
function createShowButton()
  self.editButton({index=0, click_function="showButtons", function_owner = self, label = "V", position = {0, 0.101, 0.5}, scale = {0.5, 0.5, 0.5}, color={0,0.3,0},width = 600, height = 400, font_size = 200, tooltip = "Show", alignment=3})
  self.editButton({index=47, click_function="flightMode", function_owner = self, label = "Fly", position = {0, 0.101, -0.5}, scale = {0.5, 0.5, 0.5}, color={0.3,0.3,0},width = 600, height = 400, font_size = 200, tooltip = "Fly", alignment=3})

end

function onUpdate()
  if isPickedUp and flight then
    self.setPosition({self.getPosition().x, realHeight, self.getPosition().z})
  end
end

function onObjectPickUp(colorName, object)
    if object == self and flight then
      isPickedUp = true
    end
end

function onDrop(player_color)
    if flight then
        self.measure_movement = true
        self.setPositionSmooth({self.getPosition().x, realHeight, self.getPosition().z})
    end
    isPickedUp = false

end

isPickedUp = false
flight = false
height = 0
realHeight = 0
previousName = ''
heightForFlight = 1
function flightMode()
    flight = not flight
    if flight then 
        self.measure_movement = true
        self.tooltip = true
        previousName = self.getName()
        realHeight = self.getPosition().y
        self.setName(previousName .. ': 0')
        self.drag = 50000
        self.editButton({index=48, click_function="moveUp", function_owner = self, label = "Up", position = {0.5, 0.101, 0}, scale = {0.5, 0.5, 0.5}, color={0.3,0.0,0},width = 600, height = 400, font_size = 200, tooltip = "Up", alignment=3})
        self.editButton({index=49, click_function="moveDown", function_owner = self, label = "Down", position = {-0.5, 0.101, 0}, scale = {0.5, 0.5, 0.5}, color={0.0,0.0,0.3},width = 600, height = 400, font_size = 200, tooltip = "Down", alignment=3})
    else
        self.measure_movement = false
        self.drag = 0
        realHeight = 0
        height = 0
        self.editButton({index=48, click_function="moveUp", function_owner = self, label = "Up", position = {0.5, 0.101, 0}, scale = {0.0, 0.0, 0.0}, color={0.3,0.0,0},width = 600, height = 400, font_size = 200, tooltip = "Up", alignment=3})
        self.editButton({index=49, click_function="moveDown", function_owner = self, label = "Down", position = {-0.5, 0.101, 0}, scale = {0.0, 0.0, 0.0}, color={0.0,0.0,0.3},width = 600, height = 400, font_size = 200, tooltip = "Down", alignment=3})
        self.setName(previousName)
    end
end

function moveUp()
    self.measure_movement = true
    height = height + 1
    self.drag = 5000000
    realHeight = self.getPosition().y + heightForFlight
    self.translate({0, heightForFlight, 0})
    self.setName(previousName .. ': ' .. tostring(height))
end
function moveDown()
    self.measure_movement = true
    height = height - 1
    self.drag = 5000000
    realHeight = self.getPosition().y - heightForFlight
    self.translate({0, -heightForFlight, 0})
    self.setName(previousName .. ': ' .. tostring(height))
end

--Function to iterate over JSON data and create a button for each effect and add a close menu button
function showButtons(obj,color,alt_click)
  if alt_click then
    local newSize = self.getDescription()
    if tonumber(newSize) ~= nil then
      saveData.statusLocation = 2 + newSize
      saveData.resetLocation = 2 + newSize
      resetStatuses()
      broadcastToColor("Status location changed to "..newSize.." units.", color, {1,1,1})
    else
      broadcastToColor("Description must be only a number to change size.", color, {0.7,0,0})
    end
  else
    self.editButton({index=0, width=0, label=""})
    cleanupMenu()
    local testTable = self.getBoundsNormalized()
    local pointer = 0
    for name, status in pairs(statuses) do
      pointer = pointer + 1
      self.editButton({index=(buttonPointer+pointer),click_function=status.icon,function_owner=self,label=status.name,color={0.9,0.9,0.9},font_color={0,0,0},position={0,0.101,1+(pointer*0.4)},scale={0.5,0.5,0.5},width = getSizeButton(status.name, 200),height=400,font_size=300,tooltip=charName,alignment=3})
      
    end
    self.editButton({index=(buttonPointer+pointer+1),click_function="closeButton",function_owner=self,label="^",position={0.88, 0.101, 1.37+(0.4*pointer)},scale={0.5, 0.5, 0.5},color={0.3,0,0},font_color={1,1,1},width=300, height = 250, font_size = 200, tooltip = "Close", alignment = 3})
  end
  updateSave()
end

--Function for the close button pressed
function closeButton()
  cleanupMenu()
  createShowButton()
end

--Remove menu after an item is chosen or the menu is closed
function cleanupMenu()
  local buttons = self.getButtons()
  for i, button in ipairs(buttons) do
    if button.position.z > 1 then self.editButton({index=i-1,position={0,0,0},width=0,rotation={0,0,0},label="",click_function="dummyFunction"}) end
  end
end

--Function to remove status when left-clicked
function clickedStatus(obj,color,alt_click,keyword)
  local buttons = self.getButtons()
  for i, entry in ipairs(buttons) do
    if entry.label == keyword then self.editButton({index=i-1,position={0,0,0},width=0,label="",rotation={0,0,0},click_function="dummyFunction"}) end
  end
  saveData.statusLocation = saveData.statusLocation - 0.3
  Wait.time(resetStatuses,0.05)
  updateSave()
end

--Function to reposition statuses when a status is removed.
function resetStatuses()
  local currentPos = saveData.resetLocation
  local flag = true
  local buttons = self.getButtons()
  for i, entry in ipairs(buttons) do
    if entry.tooltip ~= "Health" and entry.tooltip ~= "Heat" and entry.label ~= "Health" and entry.label ~= "Heat" then
      if entry.rotation.x == 270 then
        if entry.click_function == "clickedBurning" then
          self.editButton({index = i-1,position={-0.2,currentPos,0}})
          flag = false
        end
        if entry.click_function == "burnCounter" then
          self.editButton({index = i-1,position={0.5,currentPos,0}})
          flag = false
          currentPos = currentPos + 0.3
        end
        if flag then
          self.editButton({index=i-1,position={0,currentPos,0}})
          currentPos = currentPos + 0.3
          saveData.statusLocation = currentPos
        end
      end
    end
  end
  updateSave()
end

--General function to create statuses when the green arrow is clicked.
function createStatusButton(func,lbl,indx,clr,playerColor)
  cleanupMenu()
  createShowButton()
  local flag = false
  local buttons = self.getButtons()
  for i, entry in pairs(buttons) do
    if entry.click_function == func then flag = true end
  end
  if flag then broadcastToColor("Status already marked!", playerColor, {0.7,0,0}) else
    self.editButton({
      index = buttonPointer,
      click_function=func,
      function_owner=self,
      label = lbl,
      position = {0,saveData.statusLocation,0},
      rotation = {270,0,0},
      scale = {0.5,0.5,0.5},
      color = clr,
      font_color = {1,1,1},
      width = getSizeButton(lbl, 100),
      height = 250,
      font_size = 200,
      tooltip=statuses[indx].effects,
      alignment=3
    })
    buttonPointer = buttonPointer + 1
    saveData.statusLocation = saveData.statusLocation + 0.3
  end
  updateSave()
end

function getSizeButton(text, scaling)
  return math.max(200 + scaling * string.len(text), 2000)
end

function attachParticleEffect(name)
  print("attaching")
  print(name)
  dzObject = spawnObject({
    type = "Custom_Assetbundle",
    position = self.getPosition(),
    scale = {1, 1, 1},
    sound = false,
    parameters = particleEffects[name],
  })
  dzObject.setCustomObject(particleEffects[name])
  dzObject.memo = name
  dzObject.setName(name)
  self.addAttachment(dzObject)
  
end

function getRidOfAttachment(name)
  i = -5
  for _, containedObject in ipairs(self.getAttachments()) do
    print(containedObject.memo)
    if containedObject.memo == name then
        i = containedObject.index
        break -- Stop iterating
    end
  end
  
  if i >= 0 then
    print("Remove attachment")
    self.destroyAttachment(i)
  end
end

--Functions to create statuses above token
function dangerZone(obj,color,alt_click) 
  createStatusButton("clickedDangerZone","Danger Zone","dangerZone",{0.7,0.35,0},color) 
  attachParticleEffect("dangerZone")
end

function 
  hfi(obj,color,alt_click) createStatusButton("clickedHfi","HYPERSPEC FUEL INJECTOR","hfi",{0,0.7,0},color) 
  attachParticleEffect("corebonus")
end
function dead(obj,color,alt_click) createStatusButton("clickedDead","Dead","dead",{0,0,0},color) end
function downAndOut(obj,color,alt_click) createStatusButton("clickedDownAndOut","Down and Out","downAndOut",{0.7,0,0},color) end
function engaged(obj,color,alt_click) createStatusButton("clickedEngaged","Engaged","engaged",{0.7,0.7,0},color) end
function exposed(obj,color,alt_click) createStatusButton("clickedExposed","Exposed","exposed",{0.7,0.35,0},color) end
function hidden(obj,color,alt_click) createStatusButton("clickedHidden","Hidden","hidden",{0,0.7,0},color) end
function hiddenFromPlayers(obj,color,alt_click) 
  self.attachInvisibleHider(guid, true, Player.getColors())
  createStatusButton("clickedHiddenFromPlayers","HiddenFromPlayers","hiddenFromPlayers",{0,0.7,0},color) 
end
function invisible(obj,color,alt_click) createStatusButton("clickedInvisible","Invisible","invisible",{0.7,0,0},color) end
function prone(obj,color,alt_click) createStatusButton("clickedProne","Prone","prone",{0.7,0,0},color) end
function shutDown(obj,color,alt_click) createStatusButton("clickedShutDown","Shut Down","shutDown",{0.7,0,0},color) end
function immobilized(obj,color,alt_click) createStatusButton("clickedImmobilized","Immobilized","immobilized",{0.7,0,0},color) end
function impaired(obj,color,alt_click) createStatusButton("clickedImpaired","Impaired","impaired",{0.7,0,0},color) end
function jammed(obj,color,alt_click) createStatusButton("clickedJammed","Jammed","jammed",{0.7,0,0},color) end
function lockOn(obj,color,alt_click) createStatusButton("clickedLockOn","Lock On","lockOn",{0.7,0,0},color) end
function shredded(obj,color,alt_click) createStatusButton("clickedShredded","Shredded","shredded",{0.7,0,0},color) end
function slowed(obj,color,alt_click) createStatusButton("clickedSlowed","Slowed","slowed",{0.7,0,0},color) end
function stunned(obj,color,alt_click) createStatusButton("clickedStunned","Stunned","stunned",{0.7,0,0},color) end
function grappled(obj,color,alt_click) createStatusButton("clickedGrappled","Grappled","grappled",{0.7,0,0},color) end
function exemplarMark(obj,color,alt_click) createStatusButton("clickedExemplarMark","Exemplar's Mark","exemplarMark",{0.7,0,0},color) end
--Special function to create a status with a counter
function burning(obj,color,alt_click)
  cleanupMenu()
  createShowButton()
  local flag = false
  local buttons = self.getButtons()
  for i, entry in pairs(buttons) do
    if entry.click_function == func then flag = true end
  end
  if flag then broadcastToColor("Status already marked!", playerColor, {0.7,0,0}) else
    self.editButton({
      index = buttonPointer,
      click_function="clickedBurning",
      function_owner=self,
      label = "Burning",
      position = {-0.2,saveData.statusLocation,0},
      rotation = {270,0,0},
      scale = {0.5,0.5,0.5},
      color = {0.8,0,0},
      width = 1000,
      height = 250,
      font_size = 200,
      tooltip=statuses["burning"].effects,
      alignment=3
    })
    buttonPointer = buttonPointer + 1
    self.editButton({
      index = buttonPointer,
      click_function="burnCounter",
      function_owner=self,
      label = 0,
      position = {0.5,saveData.statusLocation,0},
      rotation = {270,0,0},
      scale = {0.5,0.5,0.5},
      color = {0.8,0,0},
      width = 400,
      height = 250,
      font_size = 200,
      tooltip=statuses["burning"].effects,
      alignment=3
    })
    buttonPointer = buttonPointer + 1
    saveData.statusLocation = saveData.statusLocation + 0.3
  end
  updateSave()
end

--Function to make the burnCounter add/subtract on click/right-click
function burnCounter(obj,color,alt_click)
  local buttonIndex = 0
  local buttonValue = 0
  local buttons = self.getButtons()
  for i, entry in pairs(buttons) do
    if entry.click_function == "burnCounter" then
      buttonIndex = i-1
      buttonValue = entry.label
    end
  end
  if alt_click then buttonValue = buttonValue - 1 else
    buttonValue = buttonValue + 1 end
  if buttonValue < 0 then buttonValue = 0 end
  self.editButton({index = buttonIndex,label = buttonValue})
end

inDangerZone = false
dzObject = {}
--Functions to broadcast statuses (right-click) or remove the button (left-click)
function clickedDangerZone(obj,color,alt_click)
  
  if alt_click or saveData.isLinked then 
    print("Danger Zone")
  else 
    clickedStatus(obj,color,alt_click,"Danger Zone") 
    getRidOfAttachment("dangerZone")
    
  end
end
function clickedHfi(obj,color,alt_click)
  if alt_click then 
    broadcastToAll(statuses["hfi"].effects, color) 
  else 
    clickedStatus(obj,color,alt_click,"HYPERSPEC FUEL INJECTOR") 
    getRidOfAttachment("corebonus")
  end
end
function clickedDead(obj,color,alt_click)
  if alt_click then broadcastToAll(statuses["dead"].effects, color) else clickedStatus(obj,color,alt_click,"Dead") end
end
function clickedDownAndOut(obj,color,alt_click)
  if alt_click then broadcastToAll(statuses["downAndOut"].effects, color) else clickedStatus(obj,color,alt_click,"Down and Out") end
end
function clickedEngaged(obj,color,alt_click)
  if alt_click then broadcastToAll(statuses["engaged"].effects, color) else clickedStatus(obj,color,alt_click,"Engaged") end
end
function clickedExposed(obj,color,alt_click)
  if alt_click then broadcastToAll(statuses["exposed"].effects, color) else clickedStatus(obj,color,alt_click,"Exposed") end
end
function clickedHidden(obj,color,alt_click)
  if alt_click then broadcastToAll(statuses["hidden"].effects, color) else clickedStatus(obj,color,alt_click,"Hidden") end
end
function clickedHiddenFromPlayers(obj,color,alt_click)
  if alt_click then
    print('Players cant see this')
  else 
    self.attachInvisibleHider(guid, false, Player.getColors())
    clickedStatus(obj,color,alt_click,"HiddenFromPlayers") 
  end
end
function clickedInvisible(obj,color,alt_click)
  if alt_click then broadcastToAll(statuses["invisible"].effects, color) else clickedStatus(obj,color,alt_click,"Invisible") end
end
function clickedProne(obj,color,alt_click)
  if alt_click then broadcastToAll(statuses["prone"].effects, color) else clickedStatus(obj,color,alt_click,"Prone") end
end
function clickedShutDown(obj,color,alt_click)
  if alt_click then broadcastToAll(statuses["shutDown"].effects, color) else clickedStatus(obj,color,alt_click,"Shut Down") end
end
function clickedImmobilized(obj,color,alt_click)
  if alt_click then broadcastToAll(statuses["immobilized"].effects, color) else clickedStatus(obj,color,alt_click,"Immobilized") end
end
function clickedImpaired(obj,color,alt_click)
  if alt_click then broadcastToAll(statuses["impaired"].effects, color) else clickedStatus(obj,color,alt_click,"Impaired") end
end
function clickedJammed(obj,color,alt_click)
  if alt_click then broadcastToAll(statuses["jammed"].effects, color) else clickedStatus(obj,color,alt_click,"Jammed") end
end
function clickedLockOn(obj,color,alt_click)
  if alt_click then broadcastToAll(statuses["lockOn"].effects, color) else clickedStatus(obj,color,alt_click,"Lock On") end
end
function clickedShredded(obj,color,alt_click)
  if alt_click then broadcastToAll(statuses["shredded"].effects, color) else clickedStatus(obj,color,alt_click,"Shredded") end
end
function clickedSlowed(obj,color,alt_click)
  if alt_click then broadcastToAll(statuses["slowed"].effects, color) else clickedStatus(obj,color,alt_click,"Slowed") end
end
function clickedStunned(obj,color,alt_click)
  if alt_click then broadcastToAll(statuses["stunned"].effects, color) else clickedStatus(obj,color,alt_click,"Stunned") end
end
function clickedGrappled(obj,color,alt_click)
  if alt_click then broadcastToAll(statuses["grappled"].effects, color) else clickedStatus(obj,color,alt_click,"Grappled") end
end
function clickedExemplarMark(obj,color,alt_click)
  if alt_click then broadcastToAll(statuses["exemplarMark"].effects, color) else clickedStatus(obj,color,alt_click,"Exemplar's Mark") end
end

--Function to remove the counter from Burning then remove the status button.
function clickedBurning(obj,color,alt_click)
  if alt_click then broadcastToAll(statuses["burning"].effects, color) else
    local buttons = self.getButtons()
    for i, entry in pairs(buttons) do
      if entry.click_function == "burnCounter" then self.editButton({index=i-1,position={0,0,0},width=0,label="",rotation={0,0,0},click_function="dummyFunction"}) end
    end
    clickedStatus(obj,color,alt_click,"Burning")
  end
end

--Particle effects
curAttachments = {}
particleEffects={}
particleEffects["corebonus"] = 
{
  type = 1,
  material = 1,
  assetbundle = "http://cloud-3.steamusercontent.com/ugc/2065503862647286980/0DD5F141C642FC313A3B0E73049F8FF65D7459A6/",
  assetbundle_secondary = ""
}
particleEffects["dangerZone"] = {
  type = 1,
  material = 1,
  assetbundle = 'http://cloud-3.steamusercontent.com/ugc/2065503862642909641/7AF71CCFBA4CC09E94578C2E85A0F1C38D895011/',
  assetbundle_secondary = ""
}

--Status effects information.  Can delete "icon" and "type" safely.  Edit to customize.
statuses={}
statuses["hfi"] = {
  name = "HYPERSPEC FUEL INJECTOR",
  icon = "hfi",
  type = "Bonus",
  effects = "For the rest of this scene, you gain +1 Accuracy on all attacks, checks, and saves; additionally, 1/turn, you can Boost as a free action"
}
statuses["dangerZone"] = {
    name = "Danger Zone",
    icon = "dangerZone",
    type = "Status",
    effects = "Characters are in the DANGER ZONE when half or more of their heat is filled in. They’re smoking hot, which enables some attacks, talents, and effects."
  }
  statuses["dead"] = {
    name = "Dead",
    icon = "dead",
    type = "Status",
    effects = "Not Alive"
  }
  statuses["downAndOut"] = {
    name = "Down and Out",
    icon = "downAndOut",
    type = "Status",
    effects = "Pilots that are DOWN AND OUT are unconscious and STUNNED – if they take any more damage, they die. They'll regain consciousness and half of their HP when they rest."
  }
  statuses["engaged"] = {
    name = "Engaged",
    icon = "engaged",
    type = "Status",
    effects = "If a character moves adjacent to a hostile character, they both gain the ENGAGED status for as long as they remain adjacent to one another. Ranged attacks made by an ENGAGED character receive +1 difficulty. Additionally, characters that become ENGAGED by targets of equal or greater SIZE during the course of a movement stop moving immediately and lose any unused movement."
  }
  statuses["exposed"] = {
    name = "Exposed",
    icon = "exposed",
    type = "Status",
    effects = "(MECHS ONLY)<br>Characters become EXPOSED when they’re dealing with runaway heat buildup – their armor is weakened by overheating, their vents are open, and their weapons are spinning down, providing plenty of weak points. All kinetic, explosive or energy damage taken by EXPOSED characters is doubled, before applying any reductions. A mech can clear EXPOSED by taking the STABILIZE action."
  }
  statuses["hidden"] = {
    name = "Hidden",
    icon = "hidden",
    type = "Status",
    effects = "HIDDEN characters can’t be targeted by hostile attacks or actions, don’t cause engagement, and enemies only know their approximate location. Attacking, forcing saves, taking reactions, using BOOST, and losing cover all remove HIDDEN after they resolve. Characters can find HIDDEN characters with SEARCH."
  }
  
statuses["hiddenFromPlayers"] = {
    name = "HiddenFromPlayers",
    icon = "hiddenFromPlayers",
    type = "Status",
    effects = "HIDDEN characters can’t be targeted by hostile attacks or actions, don’t cause engagement, and enemies only know their approximate location. Attacking, forcing saves, taking reactions, using BOOST, and losing cover all remove HIDDEN after they resolve. Characters can find HIDDEN characters with SEARCH."
  }
  
statuses["invisible"] = {
    name = "Invisible",
    icon = "invisible",
    type = "Status",
    effects = "All attacks against INVISIBLE characters, regardless of type, have a 50 percent chance to miss outright, before an attack roll is made. Roll a dice or flip a coin to determine if the attack misses.<br>Additionally, INVISIBLE characters can always HIDE, even without cover."
  }
  
statuses["prone"] = {
    name = "Prone",
    icon = "prone",
    type = "Status",
    effects = "Attacks against PRONE targets receive +1 accuracy.<br>Additionally, PRONE characters are SLOWED and count as moving in difficult terrain. Characters can remove PRONE by standing up instead of taking their standard move, unless they’re IMMOBILIZED. Standing up doesn�������t count as movement, so doesn’t trigger OVERWATCH or other effects."
  }
  
statuses["shutDown"] = {
    name = "Shut Down",
    icon = "shutDown",
    type = "Status",
    effects = "(MECHS ONLY)<br>When a mech is SHUT DOWN:<br>• all heat is cleared and the EXPOSED status is removed;<br>• any cascading NHPs are stabilised and no longer cascading;<br>• any statuses and conditions affecting the mech caused by tech actions, such as LOCK ON, immediately end.<br>SHUT DOWN mechs have IMMUNITY to all tech actions and attacks, including any from allied characters.<br>While SHUT DOWN, mechs are STUNNED indefinitely. Nothing can prevent this condition, and it remains until the mech ceases to be SHUT DOWN."
  }
  
statuses["immobilized"] = {
    name = "Immobilized",
    icon = "immobilized",
    type = "Condition",
    effects = "IMMOBILIZED characters cannot make any voluntary movements, although involuntary movements are unaffected."
  }
  
statuses["impaired"] = {
    name = "Impaired",
    icon = "impaired",
    type = "Condition",
    effects = "IMPAIRED characters receive +1 difficulty on all attacks, saves, and skill checks."
  }
  
statuses["jammed"] = {
    name = "Jammed",
    icon = "jammed",
    type = "Condition",
    effects = "JAMMED characters can’t:<br>• use comms to talk to other characters;<br>• make attacks, other than IMPROVISED ATTACK, GRAPPLE, and RAM;<br>• take reactions, or take or benefit from tech actions."
  }
  
statuses["lockOn"] = {
    name = "Lock On",
    icon = "lockOn",
    type = "Condition",
    effects = "Hostile characters can choose to consume a character’s LOCK ON condition in exchange for +1 accuracy on their next attack against that character.<br>LOCK ON is also required to use some talents and systems."
  }
  
statuses["shredded"] = {
    name = "Shredded",
    icon = "shredded",
    type = "Condition",
    effects = "SHREDDED characters don’t benefit from ARMOR or RESISTANCE."
  }
  
statuses["slowed"] = {
    name = "Slowed",
    icon = "slowed",
    type = "Condition",
    effects = "The only movement SLOWED characters can make is their standard move, on their own turn – they can’t BOOST or make any special moves granted by talents, systems, or weapons."
  }
  
statuses["stunned"] = {
    name = "Stunned",
    icon = "stunned",
    type = "Condition",
    effects = "STUNNED mechs cannot OVERCHARGE, move, or take any actions – including free actions and reactions. Pilots can still MOUNT, DISMOUNT, or EJECT from STUNNED mechs, and can take actions normally.<br>STUNNED mechs have a maximum of 5 EVASION, and automatically fail all HULL and AGILITY checks and saves."
  }
  
statuses["burning"] = {
    name = "Burning",
    icon = "burning",
    type = "Condition",
    effects = "When taking burn damage, mark the amount adding to any existing BURN. At the end of their turn, BURNING characters make an ENGINEERING check. On a success, they clear all marked burn; on a failure, they take damage equal to their total marked burn."
}

statuses["grappled"] = {
  name = "Grappled",
  icon = "grappled",
  type = "Condition",
  effects = "The character can not BOOST or take reactions for the duration of the grapple; the smaller character becomes IMMOBILIZED but moves when the larger party moves, mirroring their movement. If both parties are the same SIZE, either can make contested HULL checks at the start of their turn: the winner counts as larger than the loser until this contest is repeated. \n\n A GRAPPLE ends when: either character breaks adjacency, such as if they are knocked back by another effect; the attacker chooses to end the grapple as a free action; The defender breaks free by succeeding on a contested HULL check as a quick action."
}

statuses["exemplarMark"] = {
  name = "Exemplar's Mark",
  icon = "exemplarMark",
  type = "Condition",
  effects = "The person who applied this mark gains the \"Valiant Aid\" reaction: \n----\nFREQUENCY: 1/Round\nTRIGGER: Ally attacks your mark and misses.\nEFFECT:Your ally may reroll the attack. They must use the second result, even if it’s worse.\n----"
}